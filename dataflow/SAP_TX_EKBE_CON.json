{
	"name": "SAP_TX_EKBE_CON",
	"properties": {
		"description": "Historial documento de compra",
		"folder": {
			"name": "Datalake_Levis/Transacciones/02 Consumption"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TX_EKBE_ST",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DL_PQT_EKBE",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          MANDT as string,",
				"          EBELN as string,",
				"          EBELP as string,",
				"          ZEKKN as string,",
				"          VGABE as string,",
				"          GJAHR as string,",
				"          BELNR as string,",
				"          BUZEI as string,",
				"          BEWTP as string,",
				"          BWART as string,",
				"          BUDAT as string,",
				"          MENGE as string,",
				"          BPMNG as string,",
				"          DMBTR as string,",
				"          WRBTR as string,",
				"          WAERS as string,",
				"          AREWR as string,",
				"          WESBS as string,",
				"          BPWES as string,",
				"          SHKZG as string,",
				"          BWTAR as string,",
				"          ELIKZ as string,",
				"          XBLNR as string,",
				"          LFGJA as string,",
				"          LFBNR as string,",
				"          LFPOS as string,",
				"          GRUND as string,",
				"          CPUDT as string,",
				"          CPUTM as string,",
				"          REEWR as string,",
				"          EVERE as string,",
				"          REFWR as string,",
				"          MATNR as string,",
				"          WERKS as string,",
				"          XWSBR as string,",
				"          ETENS as string,",
				"          KNUMV as string,",
				"          MWSKZ as string,",
				"          LSMNG as string,",
				"          LSMEH as string,",
				"          EMATN as string,",
				"          AREWW as string,",
				"          HSWAE as string,",
				"          BAMNG as string,",
				"          CHARG as string,",
				"          BLDAT as string,",
				"          XWOFF as string,",
				"          XUNPL as string,",
				"          ERNAM as string,",
				"          SRVPOS as string,",
				"          PACKNO as string,",
				"          INTROW as string,",
				"          BEKKN as string,",
				"          LEMIN as string,",
				"          AREWB as string,",
				"          REWRB as string,",
				"          SAPRL as string,",
				"          MENGE_POP as string,",
				"          BPMNG_POP as string,",
				"          DMBTR_POP as string,",
				"          WRBTR_POP as string,",
				"          WESBB as string,",
				"          BPWEB as string,",
				"          WEORA as string,",
				"          AREWR_POP as string,",
				"          KUDIF as string,",
				"          RETAMT_FC as string,",
				"          RETAMT_LC as string,",
				"          RETAMTP_FC as string,",
				"          RETAMTP_LC as string,",
				"          XMACC as string,",
				"          WKURS as string,",
				"          ET_UPD as string,",
				"          J_SC_DIE_COMP_F as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(MENGE = toDecimal(MENGE,13,3),",
				"          BPMNG = toDecimal(BPMNG,13,3),",
				"          DMBTR = toDecimal(DMBTR,13,2),",
				"          WRBTR = toDecimal(WRBTR,13,2),",
				"          AREWR = toDecimal(AREWR,13,2),",
				"          WESBS = toDecimal(WESBS,13,3),",
				"          BPWES = toDecimal(BPWES,13,3),",
				"          REEWR = toDecimal(REEWR,13,2),",
				"          REFWR = toDecimal(REFWR,13,2),",
				"          LSMNG = toDecimal(LSMNG,13,3),",
				"          AREWW = toDecimal(AREWW,13,2),",
				"          BAMNG = toDecimal(BAMNG,13,3),",
				"          AREWB = toDecimal(AREWB,13,2),",
				"          REWRB = toDecimal(REWRB,13,2),",
				"          MENGE_POP = toDecimal(MENGE_POP,13,3),",
				"          BPMNG_POP = toDecimal(BPMNG_POP,13,3),",
				"          DMBTR_POP = toDecimal(DMBTR_POP,13,2),",
				"          WRBTR_POP = toDecimal(WRBTR_POP,13,2),",
				"          WESBB = toDecimal(WESBB,13,3),",
				"          BPWEB = toDecimal(BPWEB,13,3),",
				"          AREWR_POP = toDecimal(AREWR_POP,13,2),",
				"          KUDIF = toDecimal(KUDIF,13,2),",
				"          RETAMT_FC = toDecimal(RETAMT_FC,13,2),",
				"          RETAMT_LC = toDecimal(RETAMT_LC,13,2),",
				"          RETAMTP_FC = toDecimal(RETAMTP_FC,13,2),",
				"          RETAMTP_LC = toDecimal(RETAMTP_LC,13,2),",
				"          WKURS = toDecimal(WKURS,9,5)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}