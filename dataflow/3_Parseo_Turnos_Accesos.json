{
	"name": "3_Parseo_Turnos_Accesos",
	"properties": {
		"folder": {
			"name": "RRHH/Libro Asistencia"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AttendanceBookJson",
						"type": "DatasetReference"
					},
					"name": "JsonBook"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AttendanceBookParquet",
						"type": "DatasetReference"
					},
					"name": "AttendanceBook",
					"rejectedDataLinkedService": {
						"referenceName": "edw-prd-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ShiftsParquet",
						"type": "DatasetReference"
					},
					"name": "Turnos",
					"rejectedDataLinkedService": {
						"referenceName": "edw-prd-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "unrollAccesos"
				},
				{
					"name": "unrollTurnos"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Users as (PlannedInterval as (Date as string, Punches as (Type as string, Date as string, Origin as string, UploadDate as string, ShiftPunchType as string, AssignedInBook as boolean)[], Shifts as (Id as string, StartTime as string, MaxStartTime as string, ExitTime as string, Type as string, FixedShiftHours as string, Ends as string, Begins as string, ShiftDisplay as string, BreakType as string, BreakMinutes as string, BreakStart as string, BreakEnd as string, Status as string, Custom as string)[], Delay as string, BreakDelay as string, EarlyLeave as string, TimeOffs as string[], WorkedHours as string, Absent as string, Holiday as string, Worked as string, NonWorkedHours as string, AccomplishedExtraTimeBefore as ({} as string), AccomplishedExtraTimeAfter as ({} as string), AccomplishedExtraTime as ({} as string), AssignedExtraTimeBefore as ({} as string), AssignedExtraTimeAfter as ({} as string), AssignedExtraTime as ({} as string))[], Id as string, Identifier as string, Name as string, LastName as string, Enabled as string, GroupDescription as string, PositionDescription as string, Email as string)[],",
				"          ExtraTimeValues as string[]",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> JsonBook",
				"JsonBook foldDown(unroll(Users.PlannedInterval.Punches, Users),",
				"     mapColumn(",
				"          Date = Users.PlannedInterval.Date,",
				"          Type = Users.PlannedInterval.Punches.Type,",
				"          FechaHoraMovimiento = Users.PlannedInterval.Punches.Date,",
				"          Origin = Users.PlannedInterval.Punches.Origin,",
				"          UploadDate = Users.PlannedInterval.Punches.UploadDate,",
				"          ShiftPunchType = Users.PlannedInterval.Punches.ShiftPunchType,",
				"          AssignedInBook = Users.PlannedInterval.Punches.AssignedInBook,",
				"          Shifts = Users.PlannedInterval.Shifts,",
				"          Delay = Users.PlannedInterval.Delay,",
				"          BreakDelay = Users.PlannedInterval.BreakDelay,",
				"          EarlyLeave = Users.PlannedInterval.EarlyLeave,",
				"          TimeOffs = Users.PlannedInterval.TimeOffs,",
				"          WorkedHours = Users.PlannedInterval.WorkedHours,",
				"          Absent = Users.PlannedInterval.Absent,",
				"          Holiday = Users.PlannedInterval.Holiday,",
				"          Worked = Users.PlannedInterval.Worked,",
				"          NonWorkedHours = Users.PlannedInterval.NonWorkedHours,",
				"          AccomplishedExtraTimeBefore = Users.PlannedInterval.AccomplishedExtraTimeBefore,",
				"          AccomplishedExtraTimeAfter = Users.PlannedInterval.AccomplishedExtraTimeAfter,",
				"          AccomplishedExtraTime = Users.PlannedInterval.AccomplishedExtraTime,",
				"          AssignedExtraTimeBefore = Users.PlannedInterval.AssignedExtraTimeBefore,",
				"          AssignedExtraTimeAfter = Users.PlannedInterval.AssignedExtraTimeAfter,",
				"          AssignedExtraTime = Users.PlannedInterval.AssignedExtraTime,",
				"          Id = Users.Id,",
				"          Identifier = Users.Identifier,",
				"          Name = Users.Name,",
				"          LastName = Users.LastName,",
				"          Enabled = Users.Enabled,",
				"          GroupDescription = Users.GroupDescription,",
				"          PositionDescription = Users.PositionDescription,",
				"          Email = Users.Email",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> unrollAccesos",
				"JsonBook foldDown(unroll(Users.PlannedInterval.Shifts, Users),",
				"     mapColumn(",
				"          Date = Users.PlannedInterval.Date,",
				"          Punches = Users.PlannedInterval.Punches,",
				"          IdTurno = Users.PlannedInterval.Shifts.Id,",
				"          StartTime = Users.PlannedInterval.Shifts.StartTime,",
				"          MaxStartTime = Users.PlannedInterval.Shifts.MaxStartTime,",
				"          ExitTime = Users.PlannedInterval.Shifts.ExitTime,",
				"          Type = Users.PlannedInterval.Shifts.Type,",
				"          FixedShiftHours = Users.PlannedInterval.Shifts.FixedShiftHours,",
				"          Ends = Users.PlannedInterval.Shifts.Ends,",
				"          Begins = Users.PlannedInterval.Shifts.Begins,",
				"          ShiftDisplay = Users.PlannedInterval.Shifts.ShiftDisplay,",
				"          BreakType = Users.PlannedInterval.Shifts.BreakType,",
				"          BreakMinutes = Users.PlannedInterval.Shifts.BreakMinutes,",
				"          BreakStart = Users.PlannedInterval.Shifts.BreakStart,",
				"          BreakEnd = Users.PlannedInterval.Shifts.BreakEnd,",
				"          Status = Users.PlannedInterval.Shifts.Status,",
				"          Custom = Users.PlannedInterval.Shifts.Custom,",
				"          Delay = Users.PlannedInterval.Delay,",
				"          BreakDelay = Users.PlannedInterval.BreakDelay,",
				"          EarlyLeave = Users.PlannedInterval.EarlyLeave,",
				"          TimeOffs = Users.PlannedInterval.TimeOffs,",
				"          WorkedHours = Users.PlannedInterval.WorkedHours,",
				"          Absent = Users.PlannedInterval.Absent,",
				"          Holiday = Users.PlannedInterval.Holiday,",
				"          Worked = Users.PlannedInterval.Worked,",
				"          NonWorkedHours = Users.PlannedInterval.NonWorkedHours,",
				"          AccomplishedExtraTimeBefore = Users.PlannedInterval.AccomplishedExtraTimeBefore,",
				"          AccomplishedExtraTimeAfter = Users.PlannedInterval.AccomplishedExtraTimeAfter,",
				"          AccomplishedExtraTime = Users.PlannedInterval.AccomplishedExtraTime,",
				"          AssignedExtraTimeBefore = Users.PlannedInterval.AssignedExtraTimeBefore,",
				"          AssignedExtraTimeAfter = Users.PlannedInterval.AssignedExtraTimeAfter,",
				"          AssignedExtraTime = Users.PlannedInterval.AssignedExtraTime,",
				"          Id = Users.Id,",
				"          Identifier = Users.Identifier,",
				"          Name = Users.Name,",
				"          LastName = Users.LastName,",
				"          Enabled = Users.Enabled,",
				"          GroupDescription = Users.GroupDescription,",
				"          PositionDescription = Users.PositionDescription,",
				"          Email = Users.Email",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> unrollTurnos",
				"unrollAccesos sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:[(concat('AttendanceBook_',toString(toDate(addDays(currentTimestamp(),-1)), 'yyyy-MM-dd'),'.PARQUET'))],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Date,",
				"          Type,",
				"          FechaHoraMovimiento,",
				"          Origin,",
				"          UploadDate,",
				"          ShiftPunchType,",
				"          AssignedInBook,",
				"          Delay,",
				"          BreakDelay,",
				"          EarlyLeave,",
				"          WorkedHours,",
				"          Absent,",
				"          Holiday,",
				"          Worked,",
				"          NonWorkedHours,",
				"          Id,",
				"          Identifier,",
				"          Name,",
				"          LastName,",
				"          Enabled,",
				"          GroupDescription,",
				"          PositionDescription,",
				"          Email",
				"     ),",
				"     partitionBy('hash', 1)) ~> AttendanceBook",
				"unrollTurnos sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:[(concat('Shifts_',toString(toDate(addDays(currentTimestamp(),-1)), 'yyyy-MM-dd'),'.PARQUET')\r",
				")],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          Date,",
				"          IdTurno,",
				"          StartTime,",
				"          MaxStartTime,",
				"          ExitTime,",
				"          Type,",
				"          FixedShiftHours,",
				"          Ends,",
				"          Begins,",
				"          ShiftDisplay,",
				"          BreakType,",
				"          BreakMinutes,",
				"          BreakStart,",
				"          BreakEnd,",
				"          Status,",
				"          Custom,",
				"          Delay,",
				"          BreakDelay,",
				"          EarlyLeave,",
				"          TimeOffs,",
				"          WorkedHours,",
				"          Absent,",
				"          Holiday,",
				"          Worked,",
				"          NonWorkedHours,",
				"          AccomplishedExtraTimeBefore,",
				"          AccomplishedExtraTimeAfter,",
				"          AccomplishedExtraTime,",
				"          AssignedExtraTimeBefore,",
				"          AssignedExtraTimeAfter,",
				"          AssignedExtraTime,",
				"          Id,",
				"          Identifier,",
				"          Name,",
				"          LastName,",
				"          Enabled,",
				"          GroupDescription,",
				"          PositionDescription,",
				"          Email",
				"     ),",
				"     partitionBy('hash', 1)) ~> Turnos"
			]
		}
	}
}