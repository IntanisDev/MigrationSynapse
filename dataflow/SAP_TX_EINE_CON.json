{
	"name": "SAP_TX_EINE_CON",
	"properties": {
		"description": "Registro Info: OrganizaciÃ³n de compras",
		"folder": {
			"name": "Datalake_Levis/Transacciones/02 Consumption"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "TX_EINE_ST",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DL_PQT_EINE",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Prop_0 as string,",
				"          MANDT as string,",
				"          INFNR as string,",
				"          EKORG as string,",
				"          ESOKZ as string,",
				"          WERKS as string,",
				"          LOEKZ as string,",
				"          ERDAT as string,",
				"          ERNAM as string,",
				"          EKGRP as string,",
				"          WAERS as string,",
				"          BONUS as string,",
				"          MGBON as string,",
				"          MINBM as string,",
				"          NORBM as string,",
				"          APLFZ as string,",
				"          UEBTO as string,",
				"          UEBTK as string,",
				"          UNTTO as string,",
				"          ANGNR as string,",
				"          ANGDT as string,",
				"          ANFNR as string,",
				"          ANFPS as string,",
				"          ABSKZ as string,",
				"          AMODV as string,",
				"          AMODB as string,",
				"          AMOBM as string,",
				"          AMOBW as string,",
				"          AMOAM as string,",
				"          AMOAW as string,",
				"          AMORS as string,",
				"          BSTYP as string,",
				"          EBELN as string,",
				"          EBELP as string,",
				"          DATLB as string,",
				"          NETPR as string,",
				"          PEINH as string,",
				"          BPRME as string,",
				"          PRDAT as string,",
				"          BPUMZ as string,",
				"          BPUMN as string,",
				"          MTXNO as string,",
				"          WEBRE as string,",
				"          EFFPR as string,",
				"          EKKOL as string,",
				"          SKTOF as string,",
				"          KZABS as string,",
				"          MWSKZ as string,",
				"          BWTAR as string,",
				"          EBONU as string,",
				"          EVERS as string,",
				"          EXPRF as string,",
				"          BSTAE as string,",
				"          MEPRF as string,",
				"          INCO1 as string,",
				"          INCO2 as string,",
				"          XERSN as string,",
				"          EBON2 as string,",
				"          EBON3 as string,",
				"          EBONF as string,",
				"          MHDRZ as string,",
				"          VERID as string,",
				"          BSTMA as string,",
				"          RDPRF as string,",
				"          MEGRU as string,",
				"          J_1BNBM as string,",
				"          SPE_CRE_REF_DOC as string,",
				"          IPRKZ as string,",
				"          CO_ORDER as string,",
				"          VENDOR_RMA_REQ as string,",
				"          TRANSPORT_CHAIN as string,",
				"          STAGING_TIME as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive(MINBM = toDecimal(MINBM,13,3),",
				"          NORBM = toDecimal(NORBM,13,3),",
				"          APLFZ = toDecimal(APLFZ,3,0),",
				"          UEBTO = toDecimal(UEBTO,3,1),",
				"          UNTTO = toDecimal(UNTTO,3,1),",
				"          AMOBM = toDecimal(AMOBM,15,3),",
				"          AMOBW = toDecimal(AMOBW,15,2),",
				"          AMOAM = toDecimal(AMOAM,15,3),",
				"          AMOAW = toDecimal(AMOAW,15,2),",
				"          NETPR = toDecimal(NETPR,11,2),",
				"          PEINH = toDecimal(PEINH,5,0),",
				"          BPUMZ = toDecimal(BPUMZ,5,0),",
				"          BPUMN = toDecimal(BPUMN,5,0),",
				"          EFFPR = toDecimal(EFFPR,11,2),",
				"          MHDRZ = toDecimal(MHDRZ,4,0),",
				"          BSTMA = toDecimal(BSTMA,13,3),",
				"          STAGING_TIME = toDecimal(STAGING_TIME,3,0)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['TX_EINE_ene2021_jun2022.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          MANDT,",
				"          INFNR,",
				"          EKORG,",
				"          ESOKZ,",
				"          WERKS,",
				"          LOEKZ,",
				"          ERDAT,",
				"          ERNAM,",
				"          EKGRP,",
				"          WAERS,",
				"          BONUS,",
				"          MGBON,",
				"          MINBM,",
				"          NORBM,",
				"          APLFZ,",
				"          UEBTO,",
				"          UEBTK,",
				"          UNTTO,",
				"          ANGNR,",
				"          ANGDT,",
				"          ANFNR,",
				"          ANFPS,",
				"          ABSKZ,",
				"          AMODV,",
				"          AMODB,",
				"          AMOBM,",
				"          AMOBW,",
				"          AMOAM,",
				"          AMOAW,",
				"          AMORS,",
				"          BSTYP,",
				"          EBELN,",
				"          EBELP,",
				"          DATLB,",
				"          NETPR,",
				"          PEINH,",
				"          BPRME,",
				"          PRDAT,",
				"          BPUMZ,",
				"          BPUMN,",
				"          MTXNO,",
				"          WEBRE,",
				"          EFFPR,",
				"          EKKOL,",
				"          SKTOF,",
				"          KZABS,",
				"          MWSKZ,",
				"          BWTAR,",
				"          EBONU,",
				"          EVERS,",
				"          EXPRF,",
				"          BSTAE,",
				"          MEPRF,",
				"          INCO1,",
				"          INCO2,",
				"          XERSN,",
				"          EBON2,",
				"          EBON3,",
				"          EBONF,",
				"          MHDRZ,",
				"          VERID,",
				"          BSTMA,",
				"          RDPRF,",
				"          MEGRU,",
				"          J_1BNBM,",
				"          SPE_CRE_REF_DOC,",
				"          IPRKZ,",
				"          CO_ORDER,",
				"          VENDOR_RMA_REQ,",
				"          TRANSPORT_CHAIN,",
				"          STAGING_TIME",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}